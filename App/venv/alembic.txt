
It looks like you’ve set up the database connection and session configuration with SQLAlchemy in your FastAPI project, using SQLite as the database. This setup is generally fine for a simple application, especially in development.

To apply the updates to your database schema (such as adding/removing fields or changing types), you can use the following steps to help manage your database schema and apply changes effectively.

1. Create the Database Tables
You can use Base.metadata.create_all() to create the tables in your SQLite database if they don't already exist. You can place this in your main.py or a separate script to initialize the database.

For example:

python
from sqlalchemy import create_engine
from backend.models import Base  # Import your Base class from models

DATABASE_URL = "sqlite:///./ccc.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

# This will create all tables in the database based on your models
Base.metadata.create_all(bind=engine)
This will create the tables for your models (like Patient, Collection, etc.) in the SQLite database.

2. Making Schema Changes
If you make changes to the models (e.g., adding a new column, changing field types, etc.), here’s how you can handle it:

Option 1: Manually Drop and Recreate the Tables
For development purposes, you can drop the tables and recreate them using:

python
Base.metadata.drop_all(bind=engine)  # Drop all tables
Base.metadata.create_all(bind=engine)  # Recreate them
This is a quick way to refresh your database schema, but be cautious because it will delete all existing data in the database.

Option 2: Use Alembic (Recommended for Migrations)
If you plan to evolve your database schema over time, it’s recommended to use Alembic for handling migrations. Here's a recap of the steps to get Alembic set up in your project:


##Install Alembic:
```pip install alembic
Initialize Alembic: Run this command to generate an Alembic configuration:
```
```alembic init alembic
Configure Alembic: In alembic.ini, set the sqlalchemy.url to match your database:
```
##init
sqlalchemy.url = sqlite:///./ccc.db
In alembic/env.py, set the target_metadata to match your models:

##python
from backend.models import Base
target_metadata = Base.metadata
Generate Migration Scripts: Whenever you update your models, you can generate migration scripts with:

```
alembic revision --autogenerate -m "Description of changes"
Apply the Migration: Apply the generated migration script to update your database:
```
alembic upgrade head
Using Alembic will help you keep track of schema changes and manage your database updates without manually dropping/recreating tables.

3. Start the FastAPI Server
Once your tables are created and migrations are applied (if you're using Alembic), you can start your FastAPI server as usual.

```
uvicorn main:app --reload
Let me know if you need help setting up Alembic or making any further adjustments!
```






